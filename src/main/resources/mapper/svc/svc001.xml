<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="svc001Dao">

	<!-- 서비스조회 -->
    <select id="svcList" parameterType="map" resultType="LowerCamelHashMap">
    	SELECT A.TOT_CNT
			 , A.RNUM
			 , A.SVC_SEQ
			 , A.SVC_ID
			 , A.SVC_NM
			 , A.PAK_PATH
			 , A.USE_YN
			 , A.SVC_DAO
			 , A.SVC_XML
			 , A.REG_ID
			 , A.REG_DTM
			 , A.UPD_ID
			 , A.UPD_DTM
			 , A.ROW_STATUS
		  FROM (
		       SELECT COUNT(*) OVER() AS TOT_CNT
			 		, ROW_NUMBER() OVER(ORDER BY SVC_SEQ ASC) AS RNUM
			       	, SVC_SEQ
			       	, SVC_ID
			       	, SVC_NM
			       	, PAK_PATH
			       	, CASE WHEN USE_YN != 'Y' THEN 'N' ELSE USE_YN END AS USE_YN
			       	, SVC_DAO
			       	, SVC_XML
			       	, REG_ID
			       	, CONVERT(VARCHAR, REG_DTM, 120) AS REG_DTM
			       <!-- 	, DATE_FORMAT(REG_DTM, '%Y-%m-%d %T.%s') AS REG_DTM -->
			       	, UPD_ID
			       	, CONVERT(VARCHAR, UPD_DTM, 120) AS UPD_DTM
			       	<!-- , DATE_FORMAT(UPD_DTM, '%Y-%m-%d %T.%s') AS UPD_DTM -->
			       	, 'R' AS ROW_STATUS
		         FROM SVC_MANAGE
		         <where>
			       	 <if test="svcId != null and svcId != ''">
			          AND (SVC_ID = #{svcId} OR SVC_NM LIKE CONCAT('%',#{svcId}, '%'))
			         </if>
			         <if test="useYn != null and useYn != ''">
			          AND USE_YN = #{useYn})
			          
			         </if>
		         </where>
        	 <!-- ORDER BY SVC_SEQ ASC OFFSET #{pageSize} * (#{curPage} - 1) ROWS FETCH NEXT #{pageSize} ROWS ONLY -->
		   ) A
		   ORDER BY A.SVC_SEQ ASC limit #{curPage}, #{pageSize}
    </select>
    
    <!-- 순번 조회 -->
    <select id="selectSvcSeq" resultType="int">
    	/* svc001Dao.selectSvcSeq: 순번 조회 */
    	<!-- SELECT IFNULL(MAX(SVC_SEQ), 0) + 1
    		   FROM SVC_MANAGE  ALIAS_FOR_SUBQUERY  -->
    	SELECT ISNULL(MAX(SVC_SEQ), 0) + 1 
	      FROM SVC_MANAGE
    </select>
    
    <!-- 서비스등록 -->
    <insert id="svcSave" parameterType="map">
    	/* svc001Dao.svcSave: 서비스등록*/
    	<!-- <foreach collection="list" item="item" separator=";">    -->
    	MERGE 
    	 INTO SVC_MANAGE AS A1
	    USING (
	    		 SELECT #{svcSeq} AS SVC_SEQ
	    	  ) AS A
	       ON A1.SVC_SEQ = A.SVC_SEQ
	     WHEN MATCHED THEN
	    	  UPDATE 
	    	     SET SVC_ID = #{svcId}
	    	       , SVC_NM = #{svcNm}
	    	       , PAK_PATH = #{pakPath}
	    	       , USE_YN = #{useYn}
	    	       , SVC_DAO = #{svcDao}
	    	       , SVC_XML = #{svcXml} 
	    	       <include refid="commonDao.updateParamSql"/>
	    WHEN NOT MATCHED THEN
	    	 INSERT 
	    	 (     SVC_SEQ
	    	   	 , SVC_ID
	    	 	 , SVC_NM
	    	 	 , PAK_PATH
	    	 	 , USE_YN
	    	 	 , SVC_DAO
	    	 	 , SVC_XML
	    	 	 <include refid="commonDao.createColSql"/>
	    	 ) 
	    	 VALUES 
	    	 (	   A.SVC_SEQ
	    	 	 , #{svcId}
	    	 	 , #{svcNm}
	    	 	 , #{pakPath}
	    	 	 , #{useYn}
	    	 	 , #{svcDao}
	    	 	 , #{svcXml}
	    	 	 <include refid="commonDao.createParamSql"/>
	    	 )
	    	 <!-- </foreach> -->
	    	 ;
	     <!-- INSERT 
	       INTO SVC_MANAGE
    	 (     SVC_SEQ
    	   	 , SVC_ID
    	 	 , SVC_NM
    	 	 , PAK_PATH
    	 	 , USE_YN
    	 	 , SVC_DAO
    	 	 , SVC_XML
    	 	 <include refid="svc001Dao.createColSql"/>
    	 ) 
    	 VALUES 
    	 <foreach collection="list" item="item" separator=",">   
    	 (    	 
    	 	   CASE WHEN IFNULL(#{svcSeq}, '') = '' THEN #{svcSeq} ELSE #{svcSeq} END
    	 	 , #{svcId}
    	 	 , #{svcNm}
    	 	 , #{pakPath}
    	 	 , #{useYn}
    	 	 , #{svcDao}
    	 	 , #{svcXml}
    	 	 <include refid="svc001Dao.createParamSql"/>
    	 )
    	 </foreach>
    	 ON DUPLICATE KEY UPDATE  
    	         SVC_ID = VALUES(SVC_ID)
    	       , SVC_NM = VALUES(SVC_NM)
    	       , PAK_PATH = VALUES(PAK_PATH)
    	       , USE_YN = VALUES(USE_YN)
    	       , SVC_DAO = VALUES(SVC_DAO)
    	       , SVC_XML = VALUES(SVC_XML)
    	       <include refid="svc001Dao.updateParamSql"/>
    	 </foreach> -->
    </insert>

</mapper>